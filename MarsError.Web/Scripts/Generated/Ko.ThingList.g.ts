
/// <reference path="../coalesce.dependencies.d.ts" />

// Generated by IntelliTect.Coalesce

module ListViewModels {
    
    export namespace ThingDataSources {
        export class Default extends Coalesce.DataSource<ViewModels.Thing> { }
        export class FooSearchDataSource extends Coalesce.DataSource<ViewModels.Thing> {
            public fooPart: KnockoutObservable<string | null> = ko.observable(null);
            public barPart: KnockoutObservable<string | null> = ko.observable(null);
            public saveToDto = () => {
                var dto: any = {};
                dto.fooPart = this.fooPart();
                dto.barPart = this.barPart();
                return dto;
            }
        }
    }
    
    export class ThingList extends Coalesce.BaseListViewModel<ViewModels.Thing> {
        public readonly modelName: string = "Thing";
        public readonly apiController: string = "/Thing";
        public modelKeyName: string = "thingId";
        public itemClass: new () => ViewModels.Thing = ViewModels.Thing;
        
        public filter: {
            thingId?: string;
            foo?: string;
            bar?: string;
        } | null = null;
        
        /** The namespace containing all possible values of this.dataSource. */
        public dataSources: typeof ThingDataSources = ThingDataSources;
        
        /** The data source on the server to use when retrieving objects. Valid values are in this.dataSources. */
        public dataSource: Coalesce.DataSource<ViewModels.Thing> = new this.dataSources.Default();
        
        /** Configuration for all instances of ThingList. Can be overidden on each instance via instance.coalesceConfig. */
        public static coalesceConfig = new Coalesce.ListViewModelConfiguration<ThingList, ViewModels.Thing>(Coalesce.GlobalConfiguration.listViewModel);
        
        /** Configuration for this ThingList instance. */
        public coalesceConfig: Coalesce.ListViewModelConfiguration<ThingList, ViewModels.Thing>
            = new Coalesce.ListViewModelConfiguration<ThingList, ViewModels.Thing>(ThingList.coalesceConfig);
        
        
        protected createItem = (newItem?: any, parent?: any) => new ViewModels.Thing(newItem, parent);
        
        constructor() {
            super();
        }
    }
}
