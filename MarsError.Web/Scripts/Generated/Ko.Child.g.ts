
/// <reference path="../coalesce.dependencies.d.ts" />

// Generated by IntelliTect.Coalesce

module ViewModels {
    
    export class Child extends Coalesce.BaseViewModel {
        public readonly modelName = "Child";
        public readonly primaryKeyName = "childId";
        public readonly modelDisplayName = "Child";
        public readonly apiController = "/Child";
        public readonly viewController = "/Child";
        
        /** Configuration for all instances of Child. Can be overidden on each instance via instance.coalesceConfig. */
        public static coalesceConfig: Coalesce.ViewModelConfiguration<Child>
            = new Coalesce.ViewModelConfiguration<Child>(Coalesce.GlobalConfiguration.viewModel);
        
        /** Configuration for the current Child instance. */
        public coalesceConfig: Coalesce.ViewModelConfiguration<this>
            = new Coalesce.ViewModelConfiguration<Child>(Child.coalesceConfig);
        
        /** The namespace containing all possible values of this.dataSource. */
        public dataSources: typeof ListViewModels.ChildDataSources = ListViewModels.ChildDataSources;
        
        
        public childId: KnockoutObservable<number | null> = ko.observable(null);
        public name: KnockoutObservable<string | null> = ko.observable(null);
        public parent: KnockoutObservable<ViewModels.Thing | null> = ko.observable(null);
        public parentId: KnockoutObservable<number | null> = ko.observable(null);
        
        
        /** Display text for Parent */
        public parentText: KnockoutComputed<string>;
        
        
        
        
        /** Pops up a stock editor for object parent */
        public showParentEditor: (callback?: any) => void;
        
        
        
        /** 
            Load the ViewModel object from the DTO.
            @param data: The incoming data object to load.
            @param force: Will override the check against isLoading that is done to prevent recursion. False is default.
            @param allowCollectionDeletes: Set true when entire collections are loaded. True is the default. 
            In some cases only a partial collection is returned, set to false to only add/update collections.
        */
        public loadFromDto = (data: any, force: boolean = false, allowCollectionDeletes: boolean = true): void => {
            if (!data || (!force && this.isLoading())) return;
            this.isLoading(true);
            // Set the ID 
            this.myId = data.childId;
            this.childId(data.childId);
            // Load the lists of other objects
            if (!data.parent) { 
                if (data.parentId != this.parentId()) {
                    this.parent(null);
                }
            } else {
                if (!this.parent()){
                    this.parent(new Thing(data.parent, this));
                } else {
                    this.parent()!.loadFromDto(data.parent);
                }
                if (this.parent instanceof Thing && this.parent !== this.parent() && this.parent.thingId() == this.parent()!.thingId())
                {
                    this.parent.loadFromDto(data.parent, undefined, false);
                }
            }
            
            // The rest of the objects are loaded now.
            this.name(data.name);
            this.parentId(data.parentId);
            if (this.coalesceConfig.onLoadFromDto()){
                this.coalesceConfig.onLoadFromDto()(this as any);
            }
            this.isLoading(false);
            this.isDirty(false);
            if (this.coalesceConfig.validateOnLoadFromDto()) this.validate();
        };
        
        /** Saves this object into a data transfer object to send to the server. */
        public saveToDto = (): any => {
            var dto: any = {};
            dto.childId = this.childId();
            
            dto.name = this.name();
            dto.parentId = this.parentId();
            if (!dto.parentId && this.parent()) {
                dto.parentId = this.parent()!.thingId();
            }
            
            return dto;
        }
        
        /** 
            Loads any child objects that have an ID set, but not the full object.
            This is useful when creating an object that has a parent object and the ID is set on the new child.
        */
        public loadChildren = (callback?: () => void): void => {
            var loadingCount = 0;
            // See if this.parent needs to be loaded.
            if (this.parent() == null && this.parentId() != null) {
                loadingCount++;
                var parentObj = new Thing();
                parentObj.load(this.parentId(), () => {
                    loadingCount--;
                    this.parent(parentObj);
                    if (loadingCount == 0 && typeof(callback) == "function") { callback(); }
                });
            }
            if (loadingCount == 0 && typeof(callback) == "function") { callback(); }
        };
        
        public setupValidation(): void {
            if (this.errors !== null) return;
            this.errors = ko.validation.group([
                this.parentId.extend({ required: {params: true, message: "Parent is required."} }),
            ]);
            this.warnings = ko.validation.group([
            ]);
        }
        
        constructor(newItem?: object, parent?: Coalesce.BaseViewModel | ListViewModels.ChildList) {
            super(parent);
            this.baseInitialize();
            const self = this;
            
            this.parentText = ko.pureComputed(function() {
                if (self.parent() && self.parent()!.thingId()) {
                    return self.parent()!.thingId()!.toString();
                } else {
                    return "None";
                }
            });
            
            
            
            
            this.showParentEditor = function(callback: any) {
                if (!self.parent()) {
                    self.parent(new Thing());
                }
                self.parent()!.showEditor(callback)
            };
            
            self.name.subscribe(self.autoSave);
            self.parent.subscribe(self.autoSave);
            self.parentId.subscribe(self.autoSave);
            
            if (newItem) {
                self.loadFromDto(newItem, true);
            }
        }
    }
    
    export namespace Child {
    }
}
